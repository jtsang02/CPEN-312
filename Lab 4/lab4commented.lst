                 -1   $MODDE0CV
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3   L_C equ 46H ; use the binary converter on piazza
0000              4   L_P equ 0CH
0000              5   L_N equ 48H
0000              6   L_H equ 9H
0000              7   L_E equ 6H 
0000              8   L_L equ 47H 
0000              9   L_O equ 40H 
0000             10   L_1 equ 79H
0000             11   L_2 equ 24H
0000             12   L_3 equ 30H 
0000             13   L_4 equ 19H
0000             14   L_7 equ 78H
0000             15   L_8 equ 0H
0000             16   L_9 equ 10H
0000             17   BLANK equ 01111111b
0000             18   
0000             19   org 0
0000 02018E      20            ljmp initialize
0003             21   
0003             22   ; // subroutines
0003             23   
0003             24   sixMSB:
0003 758F78      25            mov HEX5, #L_7
0006 758E19      26            mov HEX4, #L_4
0009 759479      27            mov HEX3, #L_1
000C 759310      28            mov HEX2, #L_9
000F 759279      29            mov HEX1, #L_1
0012 759124      30            mov HEX0, #L_2
0015 22          31            ret
0016             32   
0016             33   sixLSB:
0016 758F79      34            mov HEX5, #L_1
0019 758E10      35            mov HEX4, #L_9
001C 759479      36            mov HEX3, #L_1
001F 759324      37            mov HEX2, #L_2
0022 759219      38            mov HEX1, #L_4
0025 759100      39            mov HEX0, #L_8
0028 22          40            ret
0029             41   
0029             42   Hello:
0029 758F09      43            mov HEX5, #L_H
002C 758E06      44            mov HEX4, #L_E
002F 759447      45            mov HEX3, #L_L
0032 759347      46            mov HEX2, #L_L
0035 759240      47            mov HEX1, #L_O
0038 75917F      48            mov HEX0, #BLANK
003B 22          49            ret
003C             50            
003C             51   CPN312:
003C 758F46      52            mov HEX5, #L_C
003F 758E0C      53            mov HEX4, #L_P
0042 759448      54            mov HEX3, #L_N
0045 759330      55            mov HEX2, #L_3
0048 759279      56            mov HEX1, #L_1
004B 759124      57            mov HEX0, #L_2
004E 22          58            ret
004F             59   
004F             60   clear:
004F 758F7F      61            mov HEX5, #BLANK
0052 758E7F      62            mov HEX4, #BLANK
0055 75947F      63            mov HEX3, #BLANK
0058 75937F      64            mov HEX2, #BLANK
005B 75927F      65            mov HEX1, #BLANK
005E 75917F      66            mov HEX0, #BLANK
0061 22          67            ret
0062             68            
0062             69   wait:                            
0062 7AB4        70       mov R2, #180  ; same subroutine from Blinky2019, but x2 to get 1s
0064 79FA        71   L3: mov R1, #250 
0066 78FA        72   L2: mov R0, #250
0068 D8FE        73   L1: djnz R0, L1  
006A D9FA        74       djnz R1, L2  
006C DAF6        75       djnz R2, L3 
006E 22          76            ret
006F             77   
006F             78   ; // conditions
006F             79            
006F             80   show_6MSB:                               ;000
006F 120003      81            lcall sixMSB
0072 020197      82            ljmp main_loop
0075             83            
0075             84   show_2LSB:                               ;001
0075 758F7F      85            mov HEX5, #BLANK
0078 758E7F      86            mov HEX4, #BLANK
007B 75947F      87            mov HEX3, #BLANK
007E 75937F      88            mov HEX2, #BLANK
0081 759219      89            mov HEX1, #L_4
0084 759100      90            mov HEX0, #L_8
0087 020197      91            ljmp main_loop
008A             92            
008A             93   scroll_left:                     ;010
008A 120062      94            lcall wait
008D AC8F        95            mov R4, HEX5
008F 858E8F      96            mov HEX5, HEX4
0092 85948E      97            mov HEX4, HEX3
0095 859394      98            mov HEX3, HEX2
0098 859293      99            mov HEX2, HEX1
009B 859192     100            mov HEX1, HEX0
009E 8C91       101            mov HEX0, R4                    
00A0 30FB63     102            jnb KEY.3, jb_main_loop         ; sends you back to main loop when key3 is pressed (typ)
00A3 80E5       103            sjmp scroll_left                ; if not pressed, repeat the loop. same process all loop cases
00A5            104   
00A5            105   scroll_right:                    ;011
00A5 120062     106            lcall wait
00A8 AC91       107            mov R4, HEX0
00AA 859291     108            mov HEX0, HEX1
00AD 859392     109            mov HEX1, HEX2
00B0 859493     110            mov HEX2, HEX3
00B3 858E94     111            mov HEX3, HEX4
00B6 858F8E     112            mov HEX4, HEX5
00B9 8C8F       113            mov HEX5, R4
00BB 30FB48     114            jnb KEY.3, jb_main_loop
00BE 80E5       115            sjmp scroll_right
00C0            116            
00C0            117   blink_6LSB:                              ;100
00C0 12004F     118            lcall clear
00C3 120016     119            lcall sixLSB
00C6 120062     120            lcall wait
00C9 12004F     121            lcall clear
00CC 120062     122            lcall wait
00CF 30FB34     123            jnb KEY.3, jb_main_loop
00D2 80EC       124            sjmp blink_6LSB
00D4            125            
00D4            126   sequential_6MSB:                 ;101
00D4 12004F     127            lcall clear
00D7 758F78     128            mov HEX5, #L_7
00DA 120062     129            lcall wait
00DD 758E19     130            mov HEX4, #L_4
00E0 120062     131            lcall wait
00E3 759479     132            mov HEX3, #L_1
00E6 120062     133            lcall wait
00E9 759310     134            mov HEX2, #L_9
00EC 120062     135            lcall wait
00EF 759279     136            mov HEX1, #L_1
00F2 120062     137            lcall wait
00F5 759124     138            mov HEX0, #L_2
00F8 120062     139            lcall wait
00FB 12004F     140            lcall clear
00FE 120062     141            lcall wait
0101 30FB02     142            jnb KEY.3, jb_main_loop
0104 80CE       143            sjmp sequential_6MSB
0106            144            
0106            145   jb_main_loop:                            ; intermediate jump step to get back to main loop
0106 020197     146            ljmp main_loop
0109            147            
0109            148   blink3:                                  ;110
0109 12004F     149            lcall clear
010C 120029     150            lcall Hello     
010F 120062     151            lcall wait
0112 12004F     152            lcall clear
0115 120062     153            lcall wait
0118 120003     154            lcall sixMSB
011B 120062     155            lcall wait
011E 12004F     156            lcall clear
0121 120062     157            lcall wait
0124 12003C     158            lcall CPN312
0127 120062     159            lcall wait
012A 12004F     160            lcall clear
012D 120062     161            lcall wait      
0130 30FBD3     162            jnb KEY.3, jb_main_loop
0133 80D4       163            sjmp blink3
0135            164            
0135            165   random:                                  ;111 
0135 12004F     166            lcall clear
0138 759124     167            mov HEX0, #L_2  
013B 759279     168            mov HEX1, #L_1  
013E 120062     169            lcall wait
0141 759310     170            mov HEX2, #L_9  
0144 759479     171            mov HEX3, #L_1
0147 120062     172            lcall wait
014A 758E19     173            mov HEX4, #L_4                          
014D 758F78     174            mov HEX5, #L_7
0150 120062     175            lcall wait
0153 12004F     176            lcall clear
0156 120062     177            lcall wait
0159 758F78     178            mov HEX5, #L_7
015C 758E19     179            mov HEX4, #L_4
015F 120062     180            lcall wait
0162 759479     181            mov HEX3, #L_1
0165 759310     182            mov HEX2, #L_9
0168 120062     183            lcall wait
016B 759279     184            mov HEX1, #L_1
016E 759124     185            mov HEX0, #L_2
0171 120062     186            lcall wait
0174 12004F     187            lcall clear
0177 120062     188            lcall wait                      
017A 30FB89     189            jnb KEY.3, jb_main_loop
017D 80B6       190            sjmp random
017F            191   
017F            192   jb6MSB:                                  ; intermediate jump steps to get to conditions
017F 02006F     193            ljmp show_6MSB
0182            194            
0182            195   jb2LSB:          
0182 020075     196            ljmp show_2LSB
0185            197            
0185            198   jb_blink_6MSB:
0185 0200C0     199            ljmp blink_6LSB
0188            200            
0188            201   set_SWA:                                 ; set switches to accumulator
0188 E5E8       202            mov a, swa                      ; dont think this is actually needed...
018A 7B01       203            mov R3, #1
018C 800E       204            sjmp events                     ; then go to switch cases
018E            205                    
018E            206   initialize:
018E 75817F     207            mov SP, #0x7f ; start every code with this line
0191 75E800     208            mov LEDRA, #0 ; turn off all LEDs
0194 759500     209            mov LEDRB, #0
0197            210            
0197            211   main_loop:
0197 30FBEE     212            jnb KEY.3, set_SWA      ; when key3 is pressed, latch the switches
019A 80FB       213            sjmp main_loop
019C            214   
019C            215   ; // switch cases
019C            216   
019C            217   events:                                                                  
019C B40003     218            cjne a, #00000000b, not00000000b        
019F 02017F     219            ljmp jb6MSB
01A2            220            
01A2            221   not00000000b:
01A2 B40102     222            cjne a, #00000001b, not00000001b
01A5 80DB       223            sjmp jb2LSB
01A7            224            
01A7            225   not00000001b:
01A7 B40206     226            cjne a, #00000010b, not00000010b
01AA 120003     227            lcall sixMSB
01AD 02008A     228            ljmp scroll_left
01B0            229   
01B0            230   not00000010b:
01B0 B40306     231            cjne a, #00000011b, not00000011b
01B3 120003     232            lcall sixMSB
01B6 0200A5     233            ljmp scroll_right
01B9            234             
01B9            235   not00000011b:
01B9 B40403     236            cjne a, #00000100b, not00000100b
01BC 0200C0     237            ljmp blink_6LSB
01BF            238   
01BF            239   not00000100b:
01BF B40503     240            cjne a, #00000101b, not00000101b
01C2 0200D4     241            ljmp sequential_6MSB
01C5            242   
01C5            243   not00000101b:
01C5 B40603     244            cjne a, #00000110b, not00000110b
01C8 020109     245            ljmp blink3
01CB            246            
01CB            247   not00000110b:
01CB B40703     248            cjne a, #00000111b, done
01CE 020135     249            ljmp random
01D1            250   
01D1            251   done:
01D1            252   
01D1            253   ; switch cases dont need a loop because you return to main loop from each condition
01D1            254   
01D1            255   END
