0000              1   ; math32test.asm:  Examples using math32.asm routines
0000              2   
                 -1   $MODDE0CV
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              4   org 0000H
0000 0202DD       5      ljmp MyProgram
0003              6   
0030              7   dseg at 30h
0030              8   
0030              9   x:               ds      4
0034             10   y:               ds      4
0038             11   bcd:     ds      5
003D             12   
0000             13   bseg
0000             14   
0000             15   mf:              dbit 1
0001             16   
                 -1   $include(math32.asm)
                570   $LIST
0299             18   
0299             19   CSEG
0299             20   
0299             21   ; Look-up table for 7-seg displays
0299             22   T_7seg:
0299 C0F9A4B0    23       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
029E 9282F880    24       DB 092H, 082H, 0F8H, 080H, 090H
     90
02A3 8883        25       DB 088H, 083H
02A5             26   
02A5             27   ; An unsigned 32-bit number results in a 10-digit BCD number.
02A5             28   ; Since there are only six 7-segment displays on the DE0-CV
02A5             29   ; board, wer are limited to just 6-digits BCD numbers.
02A5             30   Display_BCD:
02A5             31            
02A5 900299      32            mov dptr, #T_7seg
02A8             33   
02A8 E53A        34            mov a, bcd+2
02AA C4          35            swap a
02AB 540F        36            anl a, #0FH
02AD 93          37            movc a, @a+dptr
02AE F58F        38            mov HEX5, a
02B0             39            
02B0 E53A        40            mov a, bcd+2
02B2 540F        41            anl a, #0FH
02B4 93          42            movc a, @a+dptr
02B5 F58E        43            mov HEX4, a
02B7             44            
02B7 E539        45            mov a, bcd+1
02B9 C4          46            swap a
02BA 540F        47            anl a, #0FH
02BC 93          48            movc a, @a+dptr
02BD F594        49            mov HEX3, a
02BF             50            
02BF E539        51            mov a, bcd+1
02C1 540F        52            anl a, #0FH
02C3 93          53            movc a, @a+dptr
02C4 F593        54            mov HEX2, a
02C6             55   
02C6 E538        56            mov a, bcd+0
02C8 C4          57            swap a
02C9 540F        58            anl a, #0FH
02CB 93          59            movc a, @a+dptr
02CC F592        60            mov HEX1, a
02CE             61            
02CE E538        62            mov a, bcd+0
02D0 540F        63            anl a, #0FH
02D2 93          64            movc a, @a+dptr
02D3 F591        65            mov HEX0, a
02D5             66            
02D5 22          67            ret
02D6             68   
02D6             69   wait_for_key1:
02D6             70   key1_is_one:
02D6 20F9FD      71            jb KEY.1, key1_is_one ; loop while the button is not pressed
02D9             72   key1_is_zero:
02D9 30F9FD      73            jnb KEY.1, key1_is_zero ; loop while the button is pressed
02DC 22          74            ret
02DD             75   
02DD             76   MyProgram:
02DD 75817F      77            mov sp, #07FH ; Initialize the stack pointer
02E0             78            ; Turn off all LEDs!
02E0 E4          79            clr a
02E1 F5E8        80            mov LEDRA, a
02E3 F595        81            mov LEDRB, a
02E5             82   
02E5             83   Forever:
02E5             84            ; Try multiplying 123 x 4567 = 561741
02E5 75307B      85            mov x+0, #low(123)
02E8 753100      86            mov x+1, #high(123)
02EB 753200      87            mov x+2, #0
02EE 753300      88            mov x+3, #0
02F1 7534D7      89            mov y+0, #low(4567)
02F4 753511      90            mov y+1, #high(4567)
02F7 753600      91            mov y+2, #0
02FA 753700      92            mov y+3, #0
02FD             93            ; mul32 and hex2bcd are in math32.asm
02FD 12017D      94            lcall mul32
0300 120003      95            lcall hex2bcd
0303             96            ; display the result
0303 1202A5      97            lcall Display_BCD
0306             98            ; Now wait for key1 to be pressed and released so we can see the result.
0306 1202D6      99            lcall wait_for_key1
0309            100            
0309            101            ; There are macros defined in math32.asm that can be used to load constants
0309            102            ; to variables x and y. The same code above may be written as:
0309 753064     103            mov x+0, #low (100 % 0x10000) 
030C 753100     103            mov x+1, #high(100 % 0x10000) 
030F 753200     103            mov x+2, #low (100 / 0x10000) 
0312 753300     103            mov x+3, #high(100 / 0x10000) 
0315 7534D7     104            mov y+0, #low (4567 % 0x10000) 
0318 753511     104            mov y+1, #high(4567 % 0x10000) 
031B 753600     104            mov y+2, #low (4567 / 0x10000) 
031E 753700     104            mov y+3, #high(4567 / 0x10000) 
0321 12017D     105            lcall mul32
0324 120003     106            lcall hex2bcd
0327 1202A5     107            lcall Display_BCD
032A 1202D6     108            lcall wait_for_key1
032D            109            
032D            110            ; Try dividing 561741 / 123 = 4567
032D 75304D     111            mov x+0, #low (561741 % 0x10000) 
0330 753192     111            mov x+1, #high(561741 % 0x10000) 
0333 753208     111            mov x+2, #low (561741 / 0x10000) 
0336 753300     111            mov x+3, #high(561741 / 0x10000) 
0339 75347B     112            mov y+0, #low (123 % 0x10000) 
033C 753500     112            mov y+1, #high(123 % 0x10000) 
033F 753600     112            mov y+2, #low (123 / 0x10000) 
0342 753700     112            mov y+3, #high(123 / 0x10000) 
0345 12020A     113            lcall div32 ; This subroutine is in math32.asm
0348 120003     114            lcall hex2bcd
034B 1202A5     115            lcall Display_BCD
034E 1202D6     116            lcall wait_for_key1
0351            117   
0351            118            ; Try adding 1234 + 4567 = 5801
0351 7530D2     119            mov x+0, #low (1234 % 0x10000) 
0354 753104     119            mov x+1, #high(1234 % 0x10000) 
0357 753200     119            mov x+2, #low (1234 / 0x10000) 
035A 753300     119            mov x+3, #high(1234 / 0x10000) 
035D 7534D7     120            mov y+0, #low (4567 % 0x10000) 
0360 753511     120            mov y+1, #high(4567 % 0x10000) 
0363 753600     120            mov y+2, #low (4567 / 0x10000) 
0366 753700     120            mov y+3, #high(4567 / 0x10000) 
0369 1200C8     121            lcall add32 ; This subroutine is in math32.asm
036C 120003     122            lcall hex2bcd
036F 1202A5     123            lcall Display_BCD
0372 1202D6     124            lcall wait_for_key1
0375            125   
0375            126            ; Try subtracting 4567 - 1234 = 3333
0375 7530D7     127            mov x+0, #low (4567 % 0x10000) 
0378 753111     127            mov x+1, #high(4567 % 0x10000) 
037B 753200     127            mov x+2, #low (4567 / 0x10000) 
037E 753300     127            mov x+3, #high(4567 / 0x10000) 
0381 7534D2     128            mov y+0, #low (1234 % 0x10000) 
0384 753504     128            mov y+1, #high(1234 % 0x10000) 
0387 753600     128            mov y+2, #low (1234 / 0x10000) 
038A 753700     128            mov y+3, #high(1234 / 0x10000) 
038D 1200E9     129            lcall sub32 ; This subroutine is in math32.asm
0390 120003     130            lcall hex2bcd
0393 1202A5     131            lcall Display_BCD
0396 1202D6     132            lcall wait_for_key1
0399            133            
0399            134            ; Ok, that was easy.  Try computing the area of circle
0399            135            ; with a radius of 23.2.  Remember we are working with
0399            136            ; usigned 32-bit integers here, so there is the risk
0399            137            ; of overflow, in particular when multiplying big numbers.
0399            138            ; One trick you may use: approximate pi to 355/113.
0399 7530E8     139            mov x+0, #low (232 % 0x10000) 
039C 753100     139            mov x+1, #high(232 % 0x10000) 
039F 753200     139            mov x+2, #low (232 / 0x10000) 
03A2 753300     139            mov x+3, #high(232 / 0x10000) 
03A5 7534E8     140            mov y+0, #low (232 % 0x10000) 
03A8 753500     140            mov y+1, #high(232 % 0x10000) 
03AB 753600     140            mov y+2, #low (232 / 0x10000) 
03AE 753700     140            mov y+3, #high(232 / 0x10000) 
03B1 12017D     141            lcall mul32 ; Result is stored in x
03B4            142            ; Now multiply by pi
03B4 753463     143            mov y+0, #low (355 % 0x10000) 
03B7 753501     143            mov y+1, #high(355 % 0x10000) 
03BA 753600     143            mov y+2, #low (355 / 0x10000) 
03BD 753700     143            mov y+3, #high(355 / 0x10000) 
03C0 12017D     144            lcall mul32
03C3 753471     145            mov y+0, #low (113 % 0x10000) 
03C6 753500     145            mov y+1, #high(113 % 0x10000) 
03C9 753600     145            mov y+2, #low (113 / 0x10000) 
03CC 753700     145            mov y+3, #high(113 / 0x10000) 
03CF 12020A     146            lcall div32
03D2 120003     147            lcall hex2bcd
03D5 1202A5     148            lcall Display_BCD ; result should be 1690.93
03D8 1202D6     149            lcall wait_for_key1
03DB            150            
03DB 0202E5     151            ljmp Forever
03DE            152            
03DE            153   END
